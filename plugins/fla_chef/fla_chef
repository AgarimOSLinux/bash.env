#!/usr/bin/env ruby
require 'thor'
require 'fileutils'
require 'pry'

module FlaChef

  class Shef < Thor
    include Thor::Actions
    include FileUtils

    desc "init", "Initialize your FLA chef environment"
    method_option :verbose, :type => :boolean, :default => false, :required => false, :aliases => "-v"
    def init
      # Check that required environment variables are defined
      %w(CHEF_DIR VAGRANT_HOST_DATA VAGRANT_CHEF_PKGS VBOX_USER_HOME).each do |var|
        if ENV[var].nil? || ENV[var].empty?
          puts(">>> You must define #{var} before running this command.")
          return
        end
      end

      # Check that vagrant is installed
      vagrant_path = `which vagrant`
      if vagrant_path.nil? || vagrant_path.empty?
        puts(">>> You must install vagrant before running this command.")
        puts(">>> gem install vagrant")
        return
      end

      chef_dir = ENV['CHEF_DIR']

      mkdir_p(chef_dir)
      inside(chef_dir) do
        # Clone the required repos
        if File.exists?("./chef_local_tools")
          inside("#{chef_dir}/chef_local_tools") do
            puts(">>> Pulling chef_local_tools...") if options[:verbose]
            `git pull`
          end
        else
          puts(">>> Cloning chef_local_tools...") if options[:verbose]
          `git clone git@bitbucket.org:warrenv/chef_local_tools.git`
        end

        if File.exists?("./chef-vagrant-scripts")
          inside("#{chef_dir}/chef-vagrant-scripts") do
            puts(">>> Pulling chef-vagrant-scripts...") if options[:verbose]
            `git pull`
          end
        else
          puts(">>> Cloning chef-vagrant-scripts...") if options[:verbose]
          `git clone git@bitbucket.org:phillip_koebbe_fidelity/chef-vagrant-scripts.git`
        end

        if File.exists?("./local_vm_host_data")
          inside("#{chef_dir}/local_vm_host_data") do
            puts(">>> Pulling local_vm_host_data...") if options[:verbose]
            `git pull`
          end
        else
          puts(">>> Cloning local_vm_host_data...") if options[:verbose]
          `git clone git@git-2.americadirect.net:chef/local_vm_host_data.git`
        end
      end

      inside("#{chef_dir}/chef_local_tools") do
        puts(">>> Bundling chef_local_tools...") if options[:verbose]
        `bundle install --path vendor --binstubs .bundle/bin`
      end

      inside("#{chef_dir}/chef_local_tools/vagrant_boxes/ubuntu_12.04.1_server_build") do
        puts(">>> Building ubuntu_12 basebox...") if options[:verbose]
        puts(">>> Please allow the following operation to complete without any user intervention...")
        `vagrant basebox build ubuntu-12.04.1-server-clean-amd64 --force`

        pause

        puts(">>> Exporting ubuntu_12 basebox...") if options[:verbose]
        `vagrant basebox export ubuntu-12.04.1-server-clean-amd64 --force`

        pause

        puts(">>> Adding ubuntu_12 basebox...") if options[:verbose]
        `vagrant box add 'ubuntu-12.04.1-server-clean-amd64' 'ubuntu-12.04.1-server-clean-amd64.box'`
      end
    end

    desc "update_code", "Update all repos in the chef directory."
    method_option :verbose, :type => :boolean, :default => false, :required => false, :aliases => "-v"
    def update_code
      chef_dir = ENV['CHEF_DIR']
      Dir["#{chef_dir}/*"].each do |dir|
        inside(dir) do
          puts(">>> Pulling [#{File.basename(dir)}] code.")
          `git pull`
        end
      end
    end

    no_commands do
      def pause
        puts(">>> Please hit <ENTER> when ready to continue...")
        STDIN.gets
      end
    end

  end

end
FlaChef::Shef.start
